/*
 * Rainbow-API
 * The responses of the open api in swagger focus on the data field rather than the code and the message fields
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ModelsContract;
import org.openapitools.client.model.ModelsContractTaskQueryResult;
import org.openapitools.client.model.RainbowErrorsRainbowErrorDetailInfo;
import org.openapitools.client.model.ServicesContractAdminUpdateDto;
import org.openapitools.client.model.ServicesContractDeployDto;
import org.openapitools.client.model.ServicesSendTxResp;
import org.openapitools.client.model.ServicesSetSponsorResp;
import org.openapitools.client.model.ServicesSponsorInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ContractApi
 */
@Ignore
public class ContractApiTest {

    private final ContractApi api = new ContractApi();

    
    /**
     * Add contract sponsored whitelist
     *
     * Add contract sponsored whitelist, only work on conflux chain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addContractSponsorWhitelistTest() throws ApiException {
        String authorization = null;
        String address = null;
        List<String> users = null;
        ServicesSendTxResp response = 
        api.addContractSponsorWhitelist(authorization, address, users);
        
        // TODO: test validations
    }
    
    /**
     * Deploy contract
     *
     * Deploy a ERC721 or ERC1155 contract.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deployContractTest() throws ApiException {
        String authorization = null;
        ServicesContractDeployDto contractInfo = null;
        ModelsContract response = 
        api.deployContract(authorization, contractInfo);
        
        // TODO: test validations
    }
    
    /**
     * Get administrator of contract, only work on conflux chain
     *
     * Get Contract Admin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractAdminTest() throws ApiException {
        String authorization = null;
        String address = null;
        String response = 
        api.getContractAdmin(authorization, address);
        
        // TODO: test validations
    }
    
    /**
     * Contract detail
     *
     * Get Contract info
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractInfoTest() throws ApiException {
        String authorization = null;
        Integer id = null;
        ModelsContract response = 
        api.getContractInfo(authorization, id);
        
        // TODO: test validations
    }
    
    /**
     * Query sponsor
     *
     * Get the sponsor of the specified contract according to address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractSponsorInfoTest() throws ApiException {
        String authorization = null;
        String address = null;
        String chain = null;
        ServicesSponsorInfo response = 
        api.getContractSponsorInfo(authorization, address, chain);
        
        // TODO: test validations
    }
    
    /**
     * Get contract sponsored whitelist
     *
     * Get contract sponsored whitelist, only work on conflux chain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractSponsoredWhitelistTest() throws ApiException {
        String authorization = null;
        String address = null;
        List<String> response = 
        api.getContractSponsoredWhitelist(authorization, address);
        
        // TODO: test validations
    }
    
    /**
     * Obtain contract list
     *
     * Get the contract list containing the contracts deployed through the specified app.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listContractsTest() throws ApiException {
        String authorization = null;
        Integer page = null;
        Integer limit = null;
        ModelsContractTaskQueryResult response = 
        api.listContracts(authorization, page, limit);
        
        // TODO: test validations
    }
    
    /**
     * Remove contract sponsored whitelist
     *
     * Remove contract sponsored whitelist, only work on conflux chain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeContractSponsorWhitelistTest() throws ApiException {
        String authorization = null;
        String address = null;
        List<String> users = null;
        ServicesSendTxResp response = 
        api.removeContractSponsorWhitelist(authorization, address, users);
        
        // TODO: test validations
    }
    
    /**
     * Set sponsor
     *
     * Set the sponsor for a specified contract according to the address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setContractSponsorTest() throws ApiException {
        String authorization = null;
        String address = null;
        ServicesSetSponsorResp response = 
        api.setContractSponsor(authorization, address);
        
        // TODO: test validations
    }
    
    /**
     * Update administrator of contract
     *
     * Update administrator of contract, only work on conflux chain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContractAdminTest() throws ApiException {
        String authorization = null;
        String address = null;
        ServicesContractAdminUpdateDto adminInfo = null;
        ServicesSendTxResp response = 
        api.updateContractAdmin(authorization, address, adminInfo);
        
        // TODO: test validations
    }
    
}
