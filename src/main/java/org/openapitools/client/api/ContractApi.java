/*
 * Rainbow-API
 * The responses of the open api in swagger focus on the data field rather than the code and the message fields
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import org.openapitools.client.model.ModelsContract;
import org.openapitools.client.model.ModelsContractTaskQueryResult;
import org.openapitools.client.model.RainbowErrorsRainbowErrorDetailInfo;
import org.openapitools.client.model.ServicesContractAdminUpdateDto;
import org.openapitools.client.model.ServicesContractDeployDto;
import org.openapitools.client.model.ServicesSendTxResp;
import org.openapitools.client.model.ServicesSetSponsorResp;
import org.openapitools.client.model.ServicesSponsorInfo;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContractApi {
  private ApiClient apiClient;

  public ContractApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ContractApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Add contract sponsored whitelist
   * Add contract sponsored whitelist, only work on conflux chain
   * @param authorization Bearer Open_JWT (required)
   * @param address contract address (required)
   * @param users Adding sponsor whitelist (required)
   * @return ServicesSendTxResp
   * @throws ApiException if fails to make API call
   */
  public ServicesSendTxResp addContractSponsorWhitelist(String authorization, String address, List<String> users) throws ApiException {
    Object localVarPostBody = users;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling addContractSponsorWhitelist");
    }
    
    // verify the required parameter 'address' is set
    if (address == null) {
      throw new ApiException(400, "Missing the required parameter 'address' when calling addContractSponsorWhitelist");
    }
    
    // verify the required parameter 'users' is set
    if (users == null) {
      throw new ApiException(400, "Missing the required parameter 'users' when calling addContractSponsorWhitelist");
    }
    
    // create path and map variables
    String localVarPath = "/contracts/{address}/sponsor/whitelist"
      .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ServicesSendTxResp> localVarReturnType = new TypeReference<ServicesSendTxResp>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Deploy contract
   * Deploy a ERC721 or ERC1155 contract.
   * @param authorization Bearer Open_JWT (required)
   * @param contractInfo contract_info (required)
   * @return ModelsContract
   * @throws ApiException if fails to make API call
   */
  public ModelsContract deployContract(String authorization, ServicesContractDeployDto contractInfo) throws ApiException {
    Object localVarPostBody = contractInfo;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling deployContract");
    }
    
    // verify the required parameter 'contractInfo' is set
    if (contractInfo == null) {
      throw new ApiException(400, "Missing the required parameter 'contractInfo' when calling deployContract");
    }
    
    // create path and map variables
    String localVarPath = "/contracts/";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ModelsContract> localVarReturnType = new TypeReference<ModelsContract>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Get administrator of contract, only work on conflux chain
   * Get Contract Admin
   * @param authorization Bearer Open_JWT (required)
   * @param address contract address (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getContractAdmin(String authorization, String address) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling getContractAdmin");
    }
    
    // verify the required parameter 'address' is set
    if (address == null) {
      throw new ApiException(400, "Missing the required parameter 'address' when calling getContractAdmin");
    }
    
    // create path and map variables
    String localVarPath = "/contracts/{address}/admin"
      .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<String> localVarReturnType = new TypeReference<String>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Contract detail
   * Get Contract info
   * @param authorization Bearer Open_JWT (required)
   * @param id id (required)
   * @return ModelsContract
   * @throws ApiException if fails to make API call
   */
  public ModelsContract getContractInfo(String authorization, Integer id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling getContractInfo");
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getContractInfo");
    }
    
    // create path and map variables
    String localVarPath = "/contracts/detail/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ModelsContract> localVarReturnType = new TypeReference<ModelsContract>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Query sponsor
   * Get the sponsor of the specified contract according to address.
   * @param authorization Bearer Open_JWT (required)
   * @param address address (required)
   * @param chain chain (optional)
   * @return ServicesSponsorInfo
   * @throws ApiException if fails to make API call
   */
  public ServicesSponsorInfo getContractSponsorInfo(String authorization, String address, String chain) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling getContractSponsorInfo");
    }
    
    // verify the required parameter 'address' is set
    if (address == null) {
      throw new ApiException(400, "Missing the required parameter 'address' when calling getContractSponsorInfo");
    }
    
    // create path and map variables
    String localVarPath = "/contracts/{address}/sponsor"
      .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("chain", chain));

    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ServicesSponsorInfo> localVarReturnType = new TypeReference<ServicesSponsorInfo>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Get contract sponsored whitelist
   * Get contract sponsored whitelist, only work on conflux chain
   * @param authorization Bearer Open_JWT (required)
   * @param address contract address (required)
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> getContractSponsoredWhitelist(String authorization, String address) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling getContractSponsoredWhitelist");
    }
    
    // verify the required parameter 'address' is set
    if (address == null) {
      throw new ApiException(400, "Missing the required parameter 'address' when calling getContractSponsoredWhitelist");
    }
    
    // create path and map variables
    String localVarPath = "/contracts/{address}/sponsor/whitelist"
      .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<String>> localVarReturnType = new TypeReference<List<String>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Obtain contract list
   * Get the contract list containing the contracts deployed through the specified app.
   * @param authorization Bearer Open_JWT (required)
   * @param page page (optional)
   * @param limit limit (optional)
   * @return ModelsContractTaskQueryResult
   * @throws ApiException if fails to make API call
   */
  public ModelsContractTaskQueryResult listContracts(String authorization, Integer page, Integer limit) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling listContracts");
    }
    
    // create path and map variables
    String localVarPath = "/contracts/";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ModelsContractTaskQueryResult> localVarReturnType = new TypeReference<ModelsContractTaskQueryResult>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Remove contract sponsored whitelist
   * Remove contract sponsored whitelist, only work on conflux chain
   * @param authorization Bearer Open_JWT (required)
   * @param address contract address (required)
   * @param users Removing sponsor whitelist (required)
   * @return ServicesSendTxResp
   * @throws ApiException if fails to make API call
   */
  public ServicesSendTxResp removeContractSponsorWhitelist(String authorization, String address, List<String> users) throws ApiException {
    Object localVarPostBody = users;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling removeContractSponsorWhitelist");
    }
    
    // verify the required parameter 'address' is set
    if (address == null) {
      throw new ApiException(400, "Missing the required parameter 'address' when calling removeContractSponsorWhitelist");
    }
    
    // verify the required parameter 'users' is set
    if (users == null) {
      throw new ApiException(400, "Missing the required parameter 'users' when calling removeContractSponsorWhitelist");
    }
    
    // create path and map variables
    String localVarPath = "/contracts/{address}/sponsor/whitelist"
      .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ServicesSendTxResp> localVarReturnType = new TypeReference<ServicesSendTxResp>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Set sponsor
   * Set the sponsor for a specified contract according to the address
   * @param authorization Bearer Open_JWT (required)
   * @param address address (required)
   * @return ServicesSetSponsorResp
   * @throws ApiException if fails to make API call
   */
  public ServicesSetSponsorResp setContractSponsor(String authorization, String address) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling setContractSponsor");
    }
    
    // verify the required parameter 'address' is set
    if (address == null) {
      throw new ApiException(400, "Missing the required parameter 'address' when calling setContractSponsor");
    }
    
    // create path and map variables
    String localVarPath = "/contracts/{address}/sponsor"
      .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ServicesSetSponsorResp> localVarReturnType = new TypeReference<ServicesSetSponsorResp>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Update administrator of contract
   * Update administrator of contract, only work on conflux chain
   * @param authorization Bearer Open_JWT (required)
   * @param address contract address (required)
   * @param adminInfo contract admin update info (required)
   * @return ServicesSendTxResp
   * @throws ApiException if fails to make API call
   */
  public ServicesSendTxResp updateContractAdmin(String authorization, String address, ServicesContractAdminUpdateDto adminInfo) throws ApiException {
    Object localVarPostBody = adminInfo;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling updateContractAdmin");
    }
    
    // verify the required parameter 'address' is set
    if (address == null) {
      throw new ApiException(400, "Missing the required parameter 'address' when calling updateContractAdmin");
    }
    
    // verify the required parameter 'adminInfo' is set
    if (adminInfo == null) {
      throw new ApiException(400, "Missing the required parameter 'adminInfo' when calling updateContractAdmin");
    }
    
    // create path and map variables
    String localVarPath = "/contracts/{address}/admin"
      .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ServicesSendTxResp> localVarReturnType = new TypeReference<ServicesSendTxResp>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
