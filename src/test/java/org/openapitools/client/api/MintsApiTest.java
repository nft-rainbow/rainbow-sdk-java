/*
 * Rainbow-API
 * The responses of the open api in swagger focus on the data field rather than the code and the message fields
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.ModelsMintTask;
import org.openapitools.client.model.ModelsMintTaskQueryResult;
import org.openapitools.client.model.RainbowErrorsRainbowErrorDetailInfo;
import org.openapitools.client.model.ServicesCustomMintBatchDto;
import org.openapitools.client.model.ServicesCustomMintDto;
import org.openapitools.client.model.ServicesEasyMintMetaDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for MintsApi
 */
@Ignore
public class MintsApiTest {

    private final MintsApi api = new MintsApi();

    
    /**
     * Batch Mint NFTs
     *
     * Mint several NFTs once
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void batchCustomMintTest() throws ApiException {
        String authorization = null;
        ServicesCustomMintBatchDto customMintBatchDto = null;
        List<ModelsMintTask> response = 
        api.batchCustomMint(authorization, customMintBatchDto);
        
        // TODO: test validations
    }
    
    /**
     * Mint NFT
     *
     * Mint a NFT by providing a metadata url
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customMintTest() throws ApiException {
        String authorization = null;
        ServicesCustomMintDto customMintDto = null;
        ModelsMintTask response = 
        api.customMint(authorization, customMintDto);
        
        // TODO: test validations
    }
    
    /**
     * Mint NFT with file
     *
     * Mint a NFT by uploading a file which can be a video, image and so on
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void easyMintByFileTest() throws ApiException {
        String authorization = null;
        File _file = null;
        ModelsMintTask response = 
        api.easyMintByFile(authorization, _file);
        
        // TODO: test validations
    }
    
    /**
     * Mint NFT with metadata
     *
     * Mint a NFT by providing a file url to create the metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void easyMintByMetadataTest() throws ApiException {
        String authorization = null;
        ServicesEasyMintMetaDto easyMintMetaInfo = null;
        ModelsMintTask response = 
        api.easyMintByMetadata(authorization, easyMintMetaInfo);
        
        // TODO: test validations
    }
    
    /**
     * Mint NFT detail
     *
     * Get NFT detail info
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMintDetailTest() throws ApiException {
        String authorization = null;
        Integer id = null;
        ModelsMintTask response = 
        api.getMintDetail(authorization, id);
        
        // TODO: test validations
    }
    
    /**
     * Obtain NFT list
     *
     * Get the NFT list containing the NFTs minted in the specified app
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMintsTest() throws ApiException {
        String authorization = null;
        Integer page = null;
        Integer limit = null;
        String contract = null;
        String mintTo = null;
        ModelsMintTaskQueryResult response = 
        api.listMints(authorization, page, limit, contract, mintTo);
        
        // TODO: test validations
    }
    
}
