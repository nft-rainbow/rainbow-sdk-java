/*
 * Rainbow-API
 * The responses of the open api in swagger focus on the data field rather than the code and the message fields
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import java.io.File;
import org.openapitools.client.model.ModelsMintTask;
import org.openapitools.client.model.ModelsMintTaskQueryResult;
import org.openapitools.client.model.RainbowErrorsRainbowErrorDetailInfo;
import org.openapitools.client.model.ServicesCustomMintBatchDto;
import org.openapitools.client.model.ServicesCustomMintDto;
import org.openapitools.client.model.ServicesEasyMintMetaDto;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MintsApi {
  private ApiClient apiClient;

  public MintsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MintsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Batch Mint NFTs
   * Mint several NFTs once
   * @param authorization Bearer Open_JWT (required)
   * @param customMintBatchDto custom_mint_batch_dto (required)
   * @return List&lt;ModelsMintTask&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ModelsMintTask> batchCustomMint(String authorization, ServicesCustomMintBatchDto customMintBatchDto) throws ApiException {
    Object localVarPostBody = customMintBatchDto;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling batchCustomMint");
    }
    
    // verify the required parameter 'customMintBatchDto' is set
    if (customMintBatchDto == null) {
      throw new ApiException(400, "Missing the required parameter 'customMintBatchDto' when calling batchCustomMint");
    }
    
    // create path and map variables
    String localVarPath = "/mints/customizable/batch";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<ModelsMintTask>> localVarReturnType = new TypeReference<List<ModelsMintTask>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Mint NFT
   * Mint a NFT by providing a metadata url
   * @param authorization Bearer Open_JWT (required)
   * @param customMintDto custom_mint_dto (required)
   * @return ModelsMintTask
   * @throws ApiException if fails to make API call
   */
  public ModelsMintTask customMint(String authorization, ServicesCustomMintDto customMintDto) throws ApiException {
    Object localVarPostBody = customMintDto;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling customMint");
    }
    
    // verify the required parameter 'customMintDto' is set
    if (customMintDto == null) {
      throw new ApiException(400, "Missing the required parameter 'customMintDto' when calling customMint");
    }
    
    // create path and map variables
    String localVarPath = "/mints/";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ModelsMintTask> localVarReturnType = new TypeReference<ModelsMintTask>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Mint NFT with file
   * Mint a NFT by uploading a file which can be a video, image and so on
   * @param authorization Bearer Open_JWT (required)
   * @param _file file (required)
   * @return ModelsMintTask
   * @throws ApiException if fails to make API call
   */
  public ModelsMintTask easyMintByFile(String authorization, File _file) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling easyMintByFile");
    }
    
    // verify the required parameter '_file' is set
    if (_file == null) {
      throw new ApiException(400, "Missing the required parameter '_file' when calling easyMintByFile");
    }
    
    // create path and map variables
    String localVarPath = "/mints/easy/files";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    if (_file != null)
      localVarFormParams.put("file", _file);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ModelsMintTask> localVarReturnType = new TypeReference<ModelsMintTask>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Mint NFT with metadata
   * Mint a NFT by providing a file url to create the metadata
   * @param authorization Bearer Open_JWT (required)
   * @param easyMintMetaInfo easy_mint_meta_info (required)
   * @return ModelsMintTask
   * @throws ApiException if fails to make API call
   */
  public ModelsMintTask easyMintByMetadata(String authorization, ServicesEasyMintMetaDto easyMintMetaInfo) throws ApiException {
    Object localVarPostBody = easyMintMetaInfo;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling easyMintByMetadata");
    }
    
    // verify the required parameter 'easyMintMetaInfo' is set
    if (easyMintMetaInfo == null) {
      throw new ApiException(400, "Missing the required parameter 'easyMintMetaInfo' when calling easyMintByMetadata");
    }
    
    // create path and map variables
    String localVarPath = "/mints/easy/urls";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ModelsMintTask> localVarReturnType = new TypeReference<ModelsMintTask>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Mint NFT detail
   * Get NFT detail info
   * @param authorization Bearer Open_JWT (required)
   * @param id id (required)
   * @return ModelsMintTask
   * @throws ApiException if fails to make API call
   */
  public ModelsMintTask getMintDetail(String authorization, Integer id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling getMintDetail");
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getMintDetail");
    }
    
    // create path and map variables
    String localVarPath = "/mints/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ModelsMintTask> localVarReturnType = new TypeReference<ModelsMintTask>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Obtain NFT list
   * Get the NFT list containing the NFTs minted in the specified app
   * @param authorization Bearer Open_JWT (required)
   * @param page page (optional)
   * @param limit limit (optional)
   * @param contract contract (optional)
   * @param mintTo mint_to (optional)
   * @return ModelsMintTaskQueryResult
   * @throws ApiException if fails to make API call
   */
  public ModelsMintTaskQueryResult listMints(String authorization, Integer page, Integer limit, String contract, String mintTo) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      throw new ApiException(400, "Missing the required parameter 'authorization' when calling listMints");
    }
    
    // create path and map variables
    String localVarPath = "/mints/";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
    localVarQueryParams.addAll(apiClient.parameterToPair("mint_to", mintTo));

    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ModelsMintTaskQueryResult> localVarReturnType = new TypeReference<ModelsMintTaskQueryResult>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
